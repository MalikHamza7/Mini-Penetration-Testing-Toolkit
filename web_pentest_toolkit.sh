#!/bin/bash

# Colors for UI
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Global Variables
TEMP_FILE="temp_output.txt"
DOMAIN=""

# Required Tools
REQUIRED_TOOLS=(
    "subfinder"
    "httpx"
    "katana"
    "nuclei"
    "dirsearch"
    "subzy"
    "python3"
    "gf"
)

# Banner
show_banner() {
    echo -e "${BLUE}"
    echo "  __      __       .__                               ___________                  __           "
    echo " /  \    /  \ ____ |  |   ____  ____   _____   ____  \_   _____/___  __ _________/  |_  ______ "
    echo " \   \/\/   // __ \|  | _/ ___\/  _ \ /     \_/ __ \  |    __)/  _ \|  |  \_  __ \   __\/  ___/ "
    echo "  \        /\  ___/|  |_\  \__(  <_> )  Y Y  \  ___/  |     \(  <_> )  |  /|  | \/|  |  \___ \  "
    echo "   \__/\  /  \___  >____/\___  >____/|__|_|  /\___  > \___  / \____/|____/ |__|   |__| /____  > "
    echo "        \/       \/          \/            \/     \/      \/                                \/  "
    echo -e "${NC}"
    echo -e "${YELLOW}Web Penetration Testing Toolkit by Hamza${NC}"
}

# Function to check tool installation
check_tool() {
    if ! command -v $1 &> /dev/null; then
        echo -e "${RED}[!] $1 not found${NC}"
        return 1
    fi
    return 0
}

# Smart file handler
handle_file() {
    if [ ! -f "$TEMP_FILE" ]; then
        if [ -f "$1" ]; then
            cp "$1" "$TEMP_FILE"
            echo -e "${YELLOW}[+] Using previous results: $1${NC}"
        else
            echo -e "${RED}[!] No input file found!${NC}"
            exit 1
        fi
    fi
}

# Install dependencies
install_dependencies() {
    echo -e "\n${BLUE}[+] Installing Dependencies...${NC}"
    
    # Add Go to PATH
    export PATH=$PATH:/usr/local/go/bin
    export PATH=$PATH:$(go env GOPATH)/bin
    
    # Install Go tools
    echo -e "${YELLOW}[+] Installing Go tools...${NC}"
    go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
    go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
    go install -v github.com/projectdiscovery/katana/cmd/katana@latest
    go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest
    go install -v github.com/LukaSikic/subzy@latest
    go install -v github.com/tomnomnom/gf@latest
    
    # Clone repositories
    echo -e "${YELLOW}[+] Cloning required repositories...${NC}"
    git clone https://github.com/maurosoria/dirsearch.git
    git clone https://github.com/s0md3v/Corsy.git
    
    echo -e "\n${GREEN}[+] All dependencies installed!${NC}"
    echo -e "${YELLOW}Note: Add dirsearch and Corsy to your PATH or run from their directories${NC}"
}

# User interaction function
ask_continue() {
    echo -e "\n${YELLOW}[?] Continue to next step? (y/n)${NC}"
    read -p "Choice: " choice
    if [[ "$choice" == "n" || "$choice" == "N" ]]; then
        save_results "$1"
        exit 0
    fi
}

# Save results function
save_results() {
    local tool_name=$1
    local filename="${DOMAIN}_${tool_name}.txt"
    echo -e "${GREEN}[+] Saving results to ${filename}...${NC}"
    [ -f "$TEMP_FILE" ] && cp "$TEMP_FILE" "$filename"
}

# Main workflow
run_scan() {
    # Step 1: Subdomain Enumeration
    echo -e "\n${BLUE}[1] Subdomain Enumeration${NC}"
    if check_tool "subfinder"; then
        subfinder -d "$DOMAIN" -all -recursive > "$TEMP_FILE"
        cat "$TEMP_FILE"
    else
        echo -e "${RED}[!] Skipping subdomain enumeration${NC}"
    fi
    ask_continue "subdomains"

    # Step 2: Alive Subdomains
    echo -e "\n${BLUE}[2] Finding Alive Subdomains${NC}"
    if check_tool "httpx"; then
        handle_file "${DOMAIN}_subdomains.txt"
        httpx -l "$TEMP_FILE" -ports 80,443,8080,8000,8888 -threads 200 -silent > "${TEMP_FILE}.tmp"
        mv "${TEMP_FILE}.tmp" "$TEMP_FILE"
        cat "$TEMP_FILE"
    else
        echo -e "${RED}[!] Skipping alive subdomains check${NC}"
    fi
    ask_continue "alive_subdomains"

    # Step 3: URL Discovery
    echo -e "\n${BLUE}[3] URL Discovery${NC}"
    if check_tool "katana"; then
        handle_file "${DOMAIN}_alive_subdomains.txt"
        katana -u "$TEMP_FILE" -d 5 -jc -kf -fx -ef woff,css,png,svg,jpg,jpeg,gif -o "${TEMP_FILE}.tmp"
        mv "${TEMP_FILE}.tmp" "$TEMP_FILE"
        cat "$TEMP_FILE"
    else
        echo -e "${RED}[!] Skipping URL discovery${NC}"
    fi
    ask_continue "url_discovery"

    # Step 4: Interesting Files
    echo -e "\n${BLUE}[4] Finding Interesting Files${NC}"
    handle_file "${DOMAIN}_url_discovery.txt"
    grep -E "\.(txt|log|cache|secret|db|backup|yml|json|gz|rar|zip|config)$" "$TEMP_FILE" > "${TEMP_FILE}.tmp"
    mv "${TEMP_FILE}.tmp" "$TEMP_FILE"
    cat "$TEMP_FILE"
    ask_continue "interesting_files"

    # Step 5: JavaScript Files
    echo -e "\n${BLUE}[5] Extracting JavaScript Files${NC}"
    handle_file "${DOMAIN}_interesting_files.txt"
    grep -E "\.js$" "$TEMP_FILE" > "${TEMP_FILE}.tmp"
    mv "${TEMP_FILE}.tmp" "$TEMP_FILE"
    cat "$TEMP_FILE"
    ask_continue "javascript_files"

    # Step 6: Vulnerability Scanning
    echo -e "\n${BLUE}[6] Vulnerability Scanning${NC}"
    if check_tool "nuclei"; then
        handle_file "${DOMAIN}_javascript_files.txt"
        nuclei -l "$TEMP_FILE" -t ~/nuclei-templates/ -severity medium,high,critical > "${TEMP_FILE}.tmp"
        mv "${TEMP_FILE}.tmp" "$TEMP_FILE"
        cat "$TEMP_FILE"
    else
        echo -e "${RED}[!] Skipping nuclei scan${NC}"
    fi
    ask_continue "vulnerability_scan"

    echo -e "\n${GREEN}[+] Scan completed!${NC}"
    save_results "final_results"
    rm -f "$TEMP_FILE"*
}

# Main menu
main_menu() {
    show_banner
    echo -e "\n${YELLOW}1. Install Dependencies"
    echo -e "2. Start New Scan"
    echo -e "3. Exit${NC}"
    
    read -p "Select an option: " choice
    
    case $choice in
        1)
            install_dependencies
            main_menu
            ;;
        2)
            # Check for tools
            for tool in "${REQUIRED_TOOLS[@]}"; do
                if ! check_tool "$tool"; then
                    echo -e "${RED}[!] Please install dependencies first (Option 1)${NC}"
                    main_menu
                    return
                fi
            done
            
            read -p "Enter target domain: " DOMAIN
            run_scan
            ;;
        3)
            exit 0
            ;;
        *)
            echo -e "${RED}[!] Invalid option${NC}"
            main_menu
            ;;
    esac
}

# Start script
main_menu
